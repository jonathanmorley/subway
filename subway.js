// Generated by CoffeeScript 1.6.3
(function() {
  var drawGridLines, drawRoute, drawStation, map;

  map = {
    grid: {
      rows: 6,
      columns: 9,
      color: "#00B3EF"
    },
    border: 10
  };

  $(function() {
    var paper;
    map.height = 100 * Math.floor($("#map").height() / 100);
    map.width = 100 * Math.floor($("#map").width() / 100);
    paper = Raphael("map", map.width + 2 * map.border, map.height + 2 * map.border);
    drawGridLines(paper);
    return $.getJSON(data, function(data) {
      var route, station, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = data.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        route = _ref[_i];
        drawRoute(paper, route);
      }
      _ref1 = data.stations;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        station = _ref1[_j];
        _results.push(drawStation(paper, station));
      }
      return _results;
    });
  });

  drawGridLines = function(paper) {
    var clearbox, column_width, row_height, x, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    column_width = map.width / map.grid.columns;
    row_height = map.height / map.grid.rows;
    for (x = _i = 0, _ref = map.grid.columns; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
      paper.path(Raphael.format("M{0},{1}l0,{2}", map.border + x * column_width, map.border, map.height)).attr("stroke", map.grid.color);
    }
    for (x = _j = 0, _ref1 = map.grid.rows; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
      paper.path(Raphael.format("M{1},{0}l{2},0", map.border + x * row_height, map.border, map.width)).attr("stroke", map.grid.color);
    }
    clearbox = {
      stroke: "white",
      fill: "white"
    };
    paper.setStart();
    for (x = _k = 0, _ref2 = map.grid.columns; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
      paper.rect(map.border + (x - 0.5) * column_width - 4, map.border - 5, 8, 10).attr(clearbox);
    }
    for (x = _l = 1, _ref3 = map.grid.columns; 1 <= _ref3 ? _l <= _ref3 : _l >= _ref3; x = 1 <= _ref3 ? ++_l : --_l) {
      paper.text(map.border + (x - 0.5) * column_width, map.border, x).attr("fill", map.grid.color);
    }
    paper.setFinish().forEach(function(elem) {
      return elem.clone().transform(Raphael.format("t0,{0}", map.height));
    });
    paper.setStart();
    for (x = _m = 0, _ref4 = map.grid.rows; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; x = 0 <= _ref4 ? ++_m : --_m) {
      paper.rect(map.border - 4, map.border + (x - 0.5) * row_height - 5, 8, 10).attr(clearbox);
    }
    for (x = _n = 1, _ref5 = map.grid.rows; 1 <= _ref5 ? _n <= _ref5 : _n >= _ref5; x = 1 <= _ref5 ? ++_n : --_n) {
      paper.text(map.border, map.border + (x - 0.5) * row_height, String.fromCharCode(x + 64)).attr("fill", map.grid.color);
    }
    return paper.setFinish().forEach(function(elem) {
      return elem.clone().transform(Raphael.format("t{0},0", map.width));
    });
  };

  drawRoute = function(paper, route) {
    return console.log(route.edges);
  };

  drawStation = function(paper, station) {
    paper.setStart();
    return paper.setFinish();
  };

}).call(this);
